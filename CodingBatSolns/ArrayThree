//has23

public boolean has23(int[] nums) {
 
		for(int i=0;i<nums.length;i++)
		{
			if(nums[i]==2 || nums[i]==3)
			{
				return true;
			}
		}
		
		return false;
}


//no23

public boolean no23(int[] nums) {
  
		for(int i=0;i<nums.length;i++)
		{
			if(nums[i]==2 || nums[i]==3)
			{
				return false;
			}
			
		}
		
		return true;

}

//makeLast

public int[] makeLast(int[] nums) {
  
  int[] copyNums = new int[2 * nums.length];
    copyNums[copyNums.length - 1] = nums[nums.length - 1];
    return copyNums;
}


//double23
public boolean double23(int[] nums) {
  for (int i = 0 ; i<nums.length-1 ; i++ )
  {
   if (nums[0]==2 && nums[1]==2)
  {
    return true ;
  }
  if (nums[0]==3 && nums[1]==3)
  {
    return true ;
  }
  }
  return false ;
  
 
}



//fix23
public int[] fix23(int[] nums) {
  for (int i = 0 ; i<nums.length-1 ; i++ )
  {
   if (nums[0]==2 && nums[1]==3)
  {
   nums[1]=0;
   return  nums ;
  }
  if (nums[1]==2 && nums[2]==3)
  {
   nums[2]=0;
   return nums ;
  }
  }
  return nums ;
  
}



//start1
public int start1(int[] a, int[] b) {
  
  int count = 0 ;
 
    
      if (a.length>0 && a[0]==1)
      {
        count++ ;
      }
      if (b.length>0 && b[0]==1)
      {
         count++ ;
      }
      return count ;

}



//biggerTwo
public int[] biggerTwo(int[] a, int[] b) {
 if ((a[0] + a[1]) > (b[0] + b[1]))
 {
   return a;
 }
 if ((a[0] + a[1]) == (b[0] + b[1]))
 {
   return a;
 }
 return b;
}


//makeMiddle
public int[] makeMiddle(int[] nums) {
    return new int[] {nums[nums.length / 2 - 1], nums[nums.length / 2]};

}




//plusTwo
public int[] plusTwo(int[] a, int[] b) {
    
    return new int[]{a[0], a[1], b[0], b[1]};

}



//swapEnds
public int[] swapEnds(int[] nums) {
  int temp = nums[0] ;
	nums[0] = nums[nums.length-1]  ;
	nums[nums.length-1] = temp ;
  return  nums ;
}


//midThree
public int[] midThree(int[] nums) {
  int[] middle = new int[3];
  middle[0] = nums[nums.length / 2 - 1];
  middle[1] = nums[nums.length / 2];
  middle[2] = nums[nums.length / 2 + 1];
  return middle;
}




//maxTriple
public int maxTriple(int[] nums) {

   if(nums[0]<nums[nums.length/2]  && nums[nums.length-1]<nums[nums.length/2])
   {
     return nums[nums.length/2] ;
   }
              
   if(nums[0]<nums[nums.length-1] &&  nums[nums.length/2]<nums[nums.length-1])
   {
     return nums[nums.length-1]  ;
   }
   return nums[0] ;

}




//frontPiece
public int[] frontPiece(int[] nums) {
  
  if  (nums.length>1)
  {
    int[] two = new int[2];
    two[0] =  nums[0]  ;
    two[1] =  nums[1]  ;
    return two ;
  }
  return nums; 
}




//unlucky1
public boolean unlucky1(int[] nums) {
  
  if (nums.length >=1  && nums[0] == 1 && nums[1]  ==3)
  {
    return true ;
  }
  if (nums.length >=1  && nums[1] == 1 && nums[2]  ==3)
  {
    return true ;
  }
  if (nums.length >=3  && nums[2] == 1 && nums[3]  ==3)
  {
    return true ;
  }
  if (nums.length >=4  && nums[3] == 1 && nums[4]  ==3)
  {
    return true ;
  }
  if (nums.length >=5  && nums[4] == 1 && nums[5]  ==3)
  {
    return true ;
  }
  if (nums.length >= 6 && nums[5] == 1 && nums[6]  ==3)
  {
    return true ;
  }
  return  false ;
}







//make2
public int[] make2(int[] a, int[] b) {
  if (a.length >= 2) 
  {
    return new int[]{a[0], a[1]};
  }
  
  if (a.length == 1) 
  {
    return new int[]{a[0], b[0]};
  }
    return new int[]{b[0], b[1]};
}




//front11
public int[] front11(int[] a, int[] b) {
  if (a.length  >=1  && b.length  >=1)
  {
    return new int[]{a[0], b[0]};
  }
  if (a.length  <1  && b.length  <1)
  {
    return a;
  }
  if (a.length  >=1  && b.length  <1)
  {
    return new int[]{a[0]};
  }
  if (a.length  <1  && b.length  >=1)
  {
    return new int[]{b[0]};
  }
    return a ;
}

