//rotateLeft3

public int[] rotateLeft3(int[] nums) {
  int x = nums[0] ;
  int y = nums[1] ;
  int z = nums[2] ;

  nums [0] =  nums[1];
  nums [1] =  z;
  nums [2] =  x;

  return nums; 
}



//reverse3

public int[] reverse3(int[] nums) {
  int x = nums[0] ;

  nums [0] =  nums[2];
  nums [2] =  x;

  return nums; 
}






//maxEnd3
public int[] maxEnd3(int[] nums) {
  if (nums[0]>nums[nums.length-1])
  {
    nums [1] = nums [0];
    nums [2] = nums [0];
    return nums;
  }
  else 
  nums [0] = nums [2];
  nums [1] = nums [2];
      return nums;

}




//sum2
public int sum2(int[] nums) {
  if (nums.length > 1)
  {
    return (nums[0]+nums[1]) ;
  }
  else if (nums.length == 1) 
  {
    return (nums[0]);
  }
  else return 0; 
}




//middleWay
public int[] middleWay(int[] a, int[] b) {
  int[] c = new int[2];
  c[0] = a[1] ;
  c[1] =  b[1] ;

  return c ;
}




//makeEnds

public int[] makeEnds(int[] nums) {
  int[] a = new int[2] ;
  a[0] = nums[0] ;
  a[1] = nums[nums.length-1] ;
  return a;
}
